{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy.io import fits\n",
    "import numpy as np\n",
    "import glob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "overscanin = [line.rstrip('\\n') for line in open('allfiles.list')]\n",
    "noscanout = [line.rstrip('\\n') for line in open('allfiles_osr.list')]\n",
    "n=len(overscanin)\n",
    "\n",
    "for i in range(0,n):\n",
    "    data=fits.getdata(overscanin[i])\n",
    "    os_whrz_removal=np.delete(data,slice(1023,1028),axis=0)\n",
    "    os_total_removal=np.delete(os_whrz_removal,slice(1026,1077),axis=1)\n",
    "    fits.writeto(noscanout[i],os_total_removal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "biasfiles=glob.glob('bias*.fits')\n",
    "biasfiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_stack = []\n",
    "for file in biasfiles:\n",
    "    data_stack.append(fits.getdata(file))\n",
    "\n",
    "medianBias = np.median(data_stack,axis=0)\n",
    "\n",
    "header = fits.getheader(biasfiles[0])\n",
    "\n",
    "header['HISTORY'] = 'Median combined'\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "datafilesin = [line.rstrip('\\n') for line in open('files_without_bias.list')]\n",
    "datafilesout = [line.rstrip('\\n') for line in open('files_subtracted_bias.list')]\n",
    "\n",
    "\n",
    "n = len(datafilesin)\n",
    "\n",
    "for i in range(0,n):\n",
    "    data,header = fits.getdata(datafilesin[i],header=True)\n",
    "    dataout = data - medianBias\n",
    "    header['HISTORY'] = 'Bias subtracted'\n",
    "    fits.writeto(datafilesout[i],dataout,header)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "flatfiles_washm = [line.rstrip('\\n') for line in open('flats_washm.list')]\n",
    "flatfiles_JCRC = [line.rstrip('\\n') for line in open('flats_JCRC.list')]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "washm_flat_stack = []\n",
    "for file in flatfiles_washm:\n",
    "    data,header = fits.getdata(file,header=True)\n",
    "    data = data / np.median(data)\n",
    "    washm_flat_stack.append(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "washm_flat=np.median(washm_flat_stack,axis=0)\n",
    "m=np.mean(washm_flat)\n",
    "washm_flat_avg=washm_flat/m\n",
    "\n",
    "header['HISTORY'] = 'Combined and normalized flat field'\n",
    "fits.writeto('washm_flat_avg.fits',washm_flat_avg,header)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "JCRC_flat_stack = []\n",
    "for file in flatfiles_JCRC:\n",
    "    data,header = fits.getdata(file,header=True)\n",
    "    data = data / np.median(data)\n",
    "    JCRC_flat_stack.append(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "JCRC_flat=np.median(JCRC_flat_stack,axis=0)\n",
    "m=np.mean(JCRC_flat)\n",
    "JCRC_flat_avg=JCRC_flat/m\n",
    "\n",
    "header['HISTORY'] = 'Combined and normalized flat field'\n",
    "fits.writeto('JCRC_flat_avg.fits',JCRC_flat_avg,header)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "washm_datain = [line.rstrip('\\n') for line in open('washm_data.list')]\n",
    "washm_dataout = [line.rstrip('\\n') for line in open('washm_data_out.list')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "JCRC_datain = [line.rstrip('\\n') for line in open('JCRC_data.list')]\n",
    "JCRC_dataout = [line.rstrip('\\n') for line in open('JCRC_data_out.list')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=len(washm_datain)\n",
    "\n",
    "for i in range(0,n):\n",
    "    data,header = fits.getdata(washm_datain[i],header=True)\n",
    "    dataout = data / washm_flat_avg\n",
    "    header['HISTORY'] = 'Flat Fielded'\n",
    "    fits.writeto(washm_dataout[i],dataout,header)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=len(JCRC_datain)\n",
    "\n",
    "for i in range(0,n):\n",
    "    data,header = fits.getdata(JCRC_datain[i],header=True)\n",
    "    dataout = data / JCRC_flat_avg\n",
    "    header['HISTORY'] = 'Flat Fielded'\n",
    "    fits.writeto(JCRC_dataout[i],dataout,header)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy.io import fits\n",
    "import numpy as np\n",
    "import glob\n",
    "import matplotlib.pyplot as plt\n",
    "from photutils import CircularAperture as ca\n",
    "from photutils import CircularAnnulus as can\n",
    "from photutils import aperture_photometry\n",
    "import photutils\n",
    "from matplotlib.colors import LogNorm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "positions = [(911,1437),(912,854),(805,517),(1286,1134),(1331,1648),(1901,449),(1176,671),(946,410),(239,910),(332,766),(1080,1147)]\n",
    "\n",
    "apertures = ca(positions, r=6.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\matplotlib\\colors.py:1031: RuntimeWarning: invalid value encountered in less_equal\n",
      "  mask |= resdat <= 0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x1080 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "image_data=fits.getdata('wolfout21346_2.0003.fits')\n",
    "\n",
    "plt.figure(figsize=(30,15))\n",
    "plt.imshow(image_data,cmap='rainbow',norm=LogNorm(vmin=900,vmax=10000,clip=False))\n",
    "\n",
    "ca.plot(ca(positions,6))\n",
    "plt.gca().invert_yaxis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<CircularAnnulus([[ 911, 1437],\n",
       "                  [ 912,  854],\n",
       "                  [ 805,  517],\n",
       "                  [1286, 1134],\n",
       "                  [1331, 1648],\n",
       "                  [1901,  449],\n",
       "                  [1176,  671],\n",
       "                  [ 946,  410],\n",
       "                  [ 239,  910],\n",
       "                  [ 332,  766],\n",
       "                  [1080, 1147]], r_in=8.0, r_out=12.0)>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Annulus_aperatures = can(positions, r_in=8.,r_out=12.)\n",
    "Annulus_aperatures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(15,15))\n",
    "plt.imshow(image_data,cmap='rainbow',norm=LogNorm(vmin=900,vmax=10000,clip=False))\n",
    "\n",
    "can.plot(can(positions,8,12),)\n",
    "plt.gca().invert_yaxis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "aperature_values=aperture_photometry(image_data,Annulus_aperatures,method='center')\n",
    "mean_background=aperature_values['aperture_sum']/Annulus_aperatures.area()\n",
    "\n",
    "aperture_value=aperture_photometry(image_data,apertures,method='exact')\n",
    "sum_background=mean_background*apertures.area()\n",
    "app_no_bkgrnd=aperture_value['aperture_sum']-(sum_background)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "apertures = ca(positions, r=6.)\n",
    "Annulus_aperatures = can(positions, r_in=8.,r_out=12.)\n",
    "apers=[apertures,Annulus_aperatures]\n",
    "phot_table = aperture_photometry(image_data,apers)\n",
    "phot_table['residual_aperature_sum'] = app_no_bkgrnd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " id xcenter ycenter   aperture_sum_0     aperture_sum_1   residual_aperature_sum\n",
      "      pix     pix                                                               \n",
      "--- ------- ------- ------------------ ------------------ ----------------------\n",
      "  1   911.0  1437.0  51170.67930939771  56870.16926924596      26308.70434161833\n",
      "  2   912.0   854.0  44612.94897391452  56768.46191259734     19824.535099943037\n",
      "  3   805.0   517.0 35784.919997020836  56283.11936917166     11189.618403661341\n",
      "  4  1286.0  1134.0  71452.42316135802  58924.02858190663      45669.80983207932\n",
      "  5  1331.0  1648.0  77557.42918449666 58059.644331963194     52143.611101159244\n",
      "  6  1901.0   449.0  59625.98500469727  56416.77432779527      34959.11709222486\n",
      "  7  1176.0   671.0   94784.4845811204 58381.871475278924      69222.46015848135\n",
      "  8   946.0   410.0  84045.75644639226  57317.89481514186      58954.54924823373\n",
      "  9   239.0   910.0 44840.279344495604  57400.32541745627     19768.112662274165\n",
      " 10   332.0   766.0 64451.579831944255  57643.57736524676      39238.44162976323\n",
      " 11  1080.0  1147.0 49161.232077837034 58309.715771901014     23681.736060762494\n"
     ]
    }
   ],
   "source": [
    "print(phot_table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(phot_table[\"id\"], phot_table[\"residual_aperature_sum\"],label='residual aperature sum')\n",
    "ax.scatter(phot_table[\"id\"], phot_table[\"aperture_sum_0\"], label='aperture sum initial')\n",
    "plt.ylabel('Count')\n",
    "plt.xlabel('Star Number')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from photutils.detection import IRAFStarFinder\n",
    "from photutils.psf import IntegratedGaussianPRF, DAOGroup\n",
    "from photutils.background import MMMBackground, MADStdBackgroundRMS\n",
    "from astropy.modeling.fitting import LevMarLSQFitter\n",
    "from astropy.stats import gaussian_sigma_to_fwhm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Input data contains invalid values (NaNs or infs), which were automatically masked. [astropy.stats.sigma_clipping]\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\astropy\\stats\\sigma_clipping.py:165: RuntimeWarning: invalid value encountered in greater\n",
      "  _filtered_data.mask |= _filtered_data > max_value\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\astropy\\stats\\sigma_clipping.py:166: RuntimeWarning: invalid value encountered in less\n",
      "  _filtered_data.mask |= _filtered_data < min_value\n"
     ]
    }
   ],
   "source": [
    "sigma_psf=2\n",
    "\n",
    "bkgrms = MADStdBackgroundRMS()\n",
    "std = bkgrms(image_data)\n",
    "\n",
    "iraffind = IRAFStarFinder(threshold=3.5*std,\n",
    "                          fwhm=sigma_psf*gaussian_sigma_to_fwhm,\n",
    "                          minsep_fwhm=0.01, roundhi=5.0, roundlo=-5.0,\n",
    "                          sharplo=0.0, sharphi=2.0)\n",
    "daogroup = DAOGroup(2.0*sigma_psf*gaussian_sigma_to_fwhm)\n",
    "mmm_bkg = MMMBackground()\n",
    "fitter = LevMarLSQFitter()\n",
    "psf_model = IntegratedGaussianPRF(sigma=sigma_psf)\n",
    "from photutils.psf import IterativelySubtractedPSFPhotometry\n",
    "photometry = IterativelySubtractedPSFPhotometry(finder=iraffind,\n",
    "                                                group_maker=daogroup,\n",
    "                                                bkg_estimator=mmm_bkg,\n",
    "                                                psf_model=psf_model,\n",
    "                                                fitter=LevMarLSQFitter(),\n",
    "                                                niters=1, fitshape=(11,11))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Input data contains invalid values (NaNs or infs), which were automatically masked. [astropy.stats.sigma_clipping]\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\astropy\\stats\\sigma_clipping.py:165: RuntimeWarning: invalid value encountered in greater\n",
      "  _filtered_data.mask |= _filtered_data > max_value\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\astropy\\stats\\sigma_clipping.py:166: RuntimeWarning: invalid value encountered in less\n",
      "  _filtered_data.mask |= _filtered_data < min_value\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\photutils\\detection\\findstars.py:399: RuntimeWarning: invalid value encountered in greater\n",
      "  object_labels, nobjects = ndimage.label(convolved_data > threshold,\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\photutils\\detection\\core.py:241: RuntimeWarning: invalid value encountered in greater\n",
      "  peak_goodmask = np.logical_and(peak_goodmask, (data > threshold))\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\photutils\\detection\\findstars.py:483: RuntimeWarning: invalid value encountered in multiply\n",
      "  meansky = (imgcutout.data * skymask).sum() / nsky\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\photutils\\detection\\findstars.py:526: RuntimeWarning: invalid value encountered in greater\n",
      "  img = np.where(img > 0, img, 0)    # starfind discards negative pixels\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\numpy\\core\\_methods.py:32: RuntimeWarning: invalid value encountered in reduce\n",
      "  return umr_sum(a, axis, dtype, out, keepdims)\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\photutils\\detection\\findstars.py:525: RuntimeWarning: invalid value encountered in subtract\n",
      "  img = np.array((imgcutout.data - sky) * kernel.mask)\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\photutils\\detection\\findstars.py:525: RuntimeWarning: invalid value encountered in multiply\n",
      "  img = np.array((imgcutout.data - sky) * kernel.mask)\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\photutils\\detection\\findstars.py:539: RuntimeWarning: invalid value encountered in true_divide\n",
      "  img, result['ycentroid'], result['xcentroid'], 2) / m[0, 0]\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\astropy\\table\\column.py:965: RuntimeWarning: invalid value encountered in greater\n",
      "  return getattr(self.data, op)(other)\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\astropy\\table\\column.py:965: RuntimeWarning: invalid value encountered in less\n",
      "  return getattr(self.data, op)(other)\n",
      "C:\\Users\\Ben\\Anaconda3\\lib\\site-packages\\photutils\\aperture\\core.py:402: RuntimeWarning: invalid value encountered in multiply\n",
      "  aperture_sums.append(np.sum(data_cutout * mask.data))\n",
      "WARNING: The fit may be unsuccessful; check fit_info['message'] for more information. [astropy.modeling.fitting]\n"
     ]
    }
   ],
   "source": [
    "result_tab = photometry(image=image_data)\n",
    "residual_image = photometry.get_residual_image()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "photometry = BasicPSFPhotometry(group_maker=daogroup,\n",
    "                                bkg_estimator=mmm_bkg,\n",
    "                                psf_model=psf_model,\n",
    "                                fitter=LevMarLSQFitter(),\n",
    "                                fitshape=(11,11))\n",
    "pos = Table(names=['x_0', 'y_0'], data=[total_table['xcenter'],\n",
    "                                        total_table['ycenter']])\n",
    "\n",
    "result_tab = photometry(image=image_data, init_guesses=pos)\n",
    "residual_image = photometry.get_residual_image()\n",
    "result_tab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.subplots()\n",
    "plt.imshow(image_data, cmap='viridis', aspect=1,\n",
    "           interpolation='nearest', origin='lower', norm=LogNorm(20,2000))\n",
    "\n",
    "plt.title('Simulated data')\n",
    "plt.colorbar(orientation='horizontal', fraction=0.046, pad=0.04)\n",
    "plt.subplot(1 ,2, 2)\n",
    "plt.imshow(residual_image, cmap='viridis', aspect=1,\n",
    "           interpolation='nearest', origin='lower', norm=LogNorm(20,2000))\n",
    "plt.title('Residual Image')\n",
    "plt.colorbar(orientation='horizontal', fraction=0.046, pad=0.04)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.scatter(total_table[\"id\"], total_table[\"residual_aperture_sum\"],label='residual_aperture_sum')\n",
    "ax.scatter(result_tab[\"id\"], result_tab[\"flux_fit\"],label='PSF fit')\n",
    "\n",
    "ax.scatter(total_table[\"id\"], total_table[\"aperture_sum_0\"],label = 'aperture sum initial')\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
