{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from astropy.io import fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_flatfiles = [line.rstrip('\\n') for line in open('r_flat.list')]\n",
    "nmsu_flatfiles = [line.rstrip('\\n') for line in open('nmsu_flat.list')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_flat_stack = []\n",
    "for file in r_flatfiles:\n",
    "    data,header = fits.getdata(file,header=True)\n",
    "    data = data / np.median(data)\n",
    "    r_flat_stack.append(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "nmsu_flat_stack = []\n",
    "for file in nmsu_flatfiles:\n",
    "    data,header = fits.getdata(file,header=True)\n",
    "    data = data / np.median(data)\n",
    "    nmsu_flat_stack.append(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_flat = np.median(r_flat_stack,axis=0)\n",
    "m = np.mean(r_flat)\n",
    "r_flat_avg = r_flat/m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "nmsu_flat = np.median(nmsu_flat_stack,axis=0)\n",
    "m2 = np.mean(nmsu_flat)\n",
    "nmsu_flat_avg = nmsu_flat/m2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "header['HISTORY'] = 'Combined and normalized flat field'\n",
    "fits.writeto('r_flat.fits',r_flat_avg,header)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "header['HISTORY'] = 'Combined and normalized flat field'\n",
    "fits.writeto('nmsu_flat.fits',nmsu_flat_avg,header)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_datain = [line.rstrip('\\n') for line in open('r_data.list')]\n",
    "r_dataout = [line.rstrip('\\n') for line in open('r_data_out.list')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "nmsu_datain = [line.rstrip('\\n') for line in open('nmsu_data.list')]\n",
    "nmsu_dataout = [line.rstrip('\\n') for line in open('nmsu_data_out.list')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "n=len(r_datain)\n",
    "for i in range(0,n):\n",
    "    data,header = fits.getdata(r_datain[i],header=True)\n",
    "    dataout = data / r_flat_avg\n",
    "    header['HISTORY'] = 'Flat Fielded'\n",
    "    fits.writeto(r_dataout[i],dataout,header)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Sierra/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:4: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "n=len(nmsu_datain)\n",
    "for i in range(0,n):\n",
    "    data,header = fits.getdata(nmsu_datain[i],header=True)\n",
    "    dataout = data / nmsu_flat_avg\n",
    "    header['HISTORY'] = 'Flat Fielded'\n",
    "    fits.writeto(nmsu_dataout[i],dataout,header)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
